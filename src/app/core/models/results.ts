/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The unique id of the sub-study which generated this result.
 */
export type Id = string;
/**
 * The id of the parent study.
 */
export type StudyId = string;
/**
 * The id of the parent project.
 */
export type ProjectId = string;
/**
 * The current version of this model. Models with different version numbers are incompatible.
 */
export type ModelVersion = number;
/**
 * The analysed results of the benchmark-results
 */
export type DataSetResult1 = DataSetResult;
/**
 * The unique id of the original data point which has been estimated.
 */
export type ReferenceId = number;
/**
 * The estimated value.
 */
export type EstimatedValue = number;
/**
 * The estimated std error
 */
export type EstimatedStdError = number;
/**
 * The category which this result has been assigned. This may indicate, for example, the measurement was made for a system of alcohols.
 */
export type Category = string;
/**
 * The estimated values of each property within a reference data set.
 */
export type ResultEntries = DataSetResultEntry[];
/**
 * An enumeration.
 */
export type StatisticType = 'R^2' | 'RMSE' | 'MSE';
/**
 * The value of the statistic.
 */
export type Value = number;
/**
 * The lower 95% confidence interval of the statistic.
 */
export type Lower95Ci = number;
/**
 * The upper 95% confidence interval of the statistic.
 */
export type Upper95Ci = number;
/**
 * The category which this statistic has been placed into.
 */
export type Category1 = string;
/**
 * The type of property which the statistic was calculated for.
 */
export type PropertyType = string;
/**
 * The number of components in the systems which the statistic was calculated for (pure, binary, etc.).
 */
export type NComponents = number;
/**
 * Statistics about how the estimated properties compare to the reference set. These include, e.g. R^2 and RMSE values.
 */
export type StatisticEntries = DataSetStatistic[];
/**
 * The unique id of the sub-study which generated this result.
 */
export type Id1 = string;
/**
 * The id of the parent study.
 */
export type StudyId1 = string;
/**
 * The id of the parent project.
 */
export type ProjectId1 = string;
/**
 * The current version of this model. Models with different version numbers are incompatible.
 */
export type ModelVersion1 = number;
/**
 * The targets contribution to the total objective function.
 */
export type ObjectiveFunction = number;
export type Type = string;
/**
 * Statistics measuring the performance of the force field being refit against the training set.
 */
export type StatisticEntries1 = DataSetStatistic[];
/**
 * The targets contribution to the total objective function.
 */
export type ObjectiveFunction1 = number;
export type Type1 = string;
/**
 * The value of the statistic.
 */
export type Value1 = number;
/**
 * The lower 95% confidence interval of the statistic.
 */
export type Lower95Ci1 = number;
/**
 * The upper 95% confidence interval of the statistic.
 */
export type Upper95Ci1 = number;
/**
 * The category which this statistic has been placed into.
 */
export type Category2 = string;
/**
 * Statistics measuring the performance of the force field being refit against the training set.
 */
export type StatisticEntries2 = Statistic[];
/**
 * The refit force field produced by the optimization.
 */
export type RefitForceField = ForceField;
/**
 * The string representation of a set of force field parameters.This should either be an OpenFF SMIRNOFF representation, or an OpenFF Evaluator JSON serialized `ForceFieldSource`.
 */
export type InnerContent = string;

export interface BenchmarkResult {
  id: Id;
  study_id: StudyId;
  project_id: ProjectId;
  model_version?: ModelVersion;
  data_set_result: DataSetResult1;

  [k: string]: unknown;
}

/**
 * Encodes the results of estimating a data set of physical properties using
 * a particular force field as part of a sub-study.
 */
export interface DataSetResult {
  result_entries: ResultEntries;
  statistic_entries: StatisticEntries;

  [k: string]: unknown;
}

/**
 * An object which stores the value of an estimated data entry as well as the
 * original id of the data entry which was estimated.
 */
export interface DataSetResultEntry {
  reference_id: ReferenceId;
  estimated_value: EstimatedValue;
  estimated_std_error: EstimatedStdError;
  category: Category;

  [k: string]: unknown;
}

/**
 * An object which contains information about a statistic (e.g. the RMSE) computed
 * from a set of reference and estimated points.
 */
export interface DataSetStatistic {
  statistic_type: StatisticType;
  value: Value;
  lower_95_ci: Lower95Ci;
  upper_95_ci: Upper95Ci;
  category?: Category1;
  property_type: PropertyType;
  n_components: NComponents;

  [k: string]: unknown;
}

export interface OptimizationResult {
  id: Id1;
  study_id: StudyId1;
  project_id: ProjectId1;
  model_version?: ModelVersion1;
  target_results: TargetResults;
  refit_force_field: RefitForceField;

  [k: string]: unknown;
}

/**
 * The results output by each optimization target at each iteration.
 */
export interface TargetResults {
  [k: string]: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[a-z0-9-]*$".
     */
    [k: string]: EvaluatorTargetResult | RechargeTargetResult;
  };
}

/**
 * Results output while training against an OpenFF Evaluator optimization
 * target.
 */
export interface EvaluatorTargetResult {
  objective_function: ObjectiveFunction;
  type?: Type;
  statistic_entries: StatisticEntries1;

  [k: string]: unknown;
}

/**
 * Results output while training against an OpenFF Recharge optimization
 * target at a particular optimization iteration.
 */
export interface RechargeTargetResult {
  objective_function: ObjectiveFunction1;
  type?: Type1;
  statistic_entries: StatisticEntries2;

  [k: string]: unknown;
}

/**
 * An object which contains information about a statistic (e.g. the RMSE) computed
 * from a set of reference and estimated points.
 */
export interface Statistic {
  statistic_type: StatisticType;
  value: Value1;
  lower_95_ci: Lower95Ci1;
  upper_95_ci: Upper95Ci1;
  category?: Category2;

  [k: string]: unknown;
}

export interface ForceField {
  inner_content: InnerContent;

  [k: string]: unknown;
}
