/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Metadata associated with a collection retrieved from a RESTful API such as pagination information.
 */
export type Metadata = CollectionMeta;
/**
 * The number of skipped records.
 */
export type Skip = number;
/**
 * The maximum number of records returned.
 */
export type Limit = number;
/**
 * The total number of records in the collection
 */
export type TotalRecords = number;
/**
 * The unique identifier associated with the set.
 */
export type Id = string;
/**
 * A description of why and how this set was chosen.
 */
export type Description = string;
/**
 * The full name of the author.
 */
export type Name = string;
/**
 * The author's email address.
 */
export type Email = string;
/**
 * The author's host institute.
 */
export type Institute = string;
/**
 * The authors who prepared the set.
 */
export type Authors = Author[];
/**
 * The current version of this model. Models with different version numbers are incompatible.
 */
export type ModelVersion = number;
/**
 * The entries in the data set.
 */
export type Entries = DataSetEntry[];
/**
 * The unique id assigned to this entry
 */
export type Id1 = number;
/**
 * The type of property that this value corresponds to. This should correspond to an `openff.evaluator.properties` property class name.
 */
export type PropertyType = string;
/**
 * The temperature (K) at which this value was measured.
 */
export type Temperature = number;
/**
 * The pressure (kPa) at which this value was measured.
 */
export type Pressure = number;
/**
 * The phase that the property was measured in.
 */
export type Phase = string;
/**
 * The value in the default unit for the property.
 */
export type Value = number;
/**
 * The std error in the default unit for the property.
 */
export type StdError = number;
/**
 * The DOI which encodes the source of the measurement.
 */
export type Doi = string;
/**
 * The components in the systems for which the measurement was made.
 */
export type Components = Component[];
/**
 * The smiles representation of the component.
 */
export type Smiles = string;
/**
 * The mole fraction of this component.
 */
export type MoleFraction = number;
/**
 * The exact amount of this component.
 */
export type ExactAmount = number;
/**
 * The role of this component in the system (e.g solvent, solute, ligand, etc.)
 */
export type Role = string;
/**
 * The stored collection of physical property data sets.
 */
export type DataSets = DataSet[];
/**
 * Metadata associated with a collection retrieved from a RESTful API such as pagination information.
 */
export type Metadata1 = CollectionMeta;
/**
 * The unique identifier associated with the set.
 */
export type Id2 = string;
/**
 * A description of why and how this set was chosen.
 */
export type Description1 = string;
/**
 * The authors who prepared the set.
 */
export type Authors1 = Author[];
/**
 * The current version of this model. Models with different version numbers are incompatible.
 */
export type ModelVersion1 = number;
/**
 * The ids of the QCA compute records to include in the data set.
 */
export type Entries1 = string[];
/**
 * The stored collection of quantum chemical data sets.
 */
export type DataSets1 = QCDataSet[];

/**
 * A collection of physical property data sets.
 */
export interface DataSetCollection {
  metadata?: Metadata;
  data_sets?: DataSets;

  [k: string]: unknown;
}

/**
 * A data model which stores metadata about a retrieved collection, such as
 * pagination information.
 */
export interface CollectionMeta {
  skip: Skip;
  limit: Limit;
  total_records: TotalRecords;

  [k: string]: unknown;
}

/**
 * A data set of physical property measurements which have been collected from
 * an experimental data source.
 */
export interface DataSet {
  id: Id;
  description: Description;
  authors: Authors;
  model_version?: ModelVersion;
  entries: Entries;

  [k: string]: unknown;
}

/**
 * A representation an author. This may be the author of a project
 * or a data set for example.
 */
export interface Author {
  name: Name;
  email: Email;
  institute: Institute;

  [k: string]: unknown;
}

export interface DataSetEntry {
  id?: Id1;
  property_type: PropertyType;
  temperature: Temperature;
  pressure: Pressure;
  phase?: Phase;
  value: Value;
  std_error: StdError;
  doi: Doi;
  components: Components;

  [k: string]: unknown;
}

export interface Component {
  smiles: Smiles;
  mole_fraction: MoleFraction;
  exact_amount?: ExactAmount;
  role?: Role;

  [k: string]: unknown;
}

/**
 * A collection of quantum chemical data sets.
 */
export interface QCDataSetCollection {
  metadata?: Metadata1;
  data_sets?: DataSets1;

  [k: string]: unknown;
}

/**
 * A reference to a data set of quantum chemical (QC) computations which have been
 * stored in the main QCArchive repository.
 */
export interface QCDataSet {
  id: Id2;
  description: Description1;
  authors: Authors1;
  model_version?: ModelVersion1;
  entries: Entries1;

  [k: string]: unknown;
}
